openapi: 3.0.3
info:
  title: DY-GOLFCART Management System API
  description: |
    자율주행 골프카트 관제 플랫폼 API
    
    ## 주요 기능
    - 골프장 및 지도 관리 (제조사)
    - 골프카트 등록 및 할당
    - 실시간 모니터링 및 제어
    - 경로 및 지오펜스 설정
    
    ## 인증
    모든 API는 JWT Bearer Token 인증이 필요합니다.
  version: 1.0.0
  contact:
    name: DY Innovate
    email: support@dy-golfcart.com

servers:
  - url: https://api.dy-golfcart.com/v1
    description: Production Server
  - url: https://staging-api.dy-golfcart.com/v1
    description: Staging Server
  - url: http://localhost:8000/v1
    description: Development Server

tags:
  - name: Auth
    description: 인증 관련 API
  - name: Golf Courses
    description: 골프장 관리 API (제조사 전용)
  - name: Maps
    description: 지도 및 경로 관리 API
  - name: Carts
    description: 골프카트 관리 API
  - name: Telemetry
    description: 실시간 텔레메트리 API
  - name: Commands
    description: 카트 제어 명령 API
  - name: Events
    description: 이벤트 및 알림 API
  - name: Assignments
    description: 카트 예약/배정 API
  - name: Maintenance
    description: 유지보수 관리 API
  - name: Users
    description: 사용자 관리 API

security:
  - bearerAuth: []

paths:
  # ===================================
  # Authentication
  # ===================================
  /auth/login:
    post:
      tags:
        - Auth
      summary: 사용자 로그인
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: admin@dy-golfcart.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        200:
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: integer
                    example: 3600
                  user:
                    $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: 토큰 갱신
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
      responses:
        200:
          description: 토큰 갱신 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  expires_in:
                    type: integer

  # ===================================
  # Golf Courses Management
  # ===================================
  /golf-courses:
    get:
      tags:
        - Golf Courses
      summary: 골프장 목록 조회
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, MAINTENANCE]
      responses:
        200:
          description: 골프장 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/GolfCourse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Golf Courses
      summary: 골프장 생성 (제조사 전용)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGolfCourse'
      responses:
        201:
          description: 골프장 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /golf-courses/{golfCourseId}:
    get:
      tags:
        - Golf Courses
      summary: 골프장 상세 정보 조회
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      responses:
        200:
          description: 골프장 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourseDetail'
        404:
          $ref: '#/components/responses/NotFoundError'

    patch:
      tags:
        - Golf Courses
      summary: 골프장 정보 수정
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGolfCourse'
      responses:
        200:
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'

  # ===================================
  # Maps Management (Independent Lifecycle)
  # ===================================
  /maps/upload:
    post:
      tags:
        - Maps
      summary: 지도 업로드 (제조사 전용)
      description: |
        골프장과 독립적으로 지도 데이터를 업로드하고 처리합니다.
        업로드된 지도는 S3에 저장되고 타일 생성 후 map_features 테이블에 저장됩니다.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - name
                - version
              properties:
                file:
                  type: string
                  format: binary
                  description: 지도 파일 (GeoJSON, KML, 또는 이미지)
                name:
                  type: string
                  description: 지도 이름
                  example: "Pine Hills Main Course"
                version:
                  type: string
                  example: "1.0.0"
                center_lat:
                  type: number
                  example: 37.7749
                center_lng:
                  type: number
                  example: -122.4194
                zoom_levels:
                  type: array
                  items:
                    type: integer
                  example: [10, 12, 14, 16, 18]
      responses:
        200:
          description: 지도 업로드 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  map_id:
                    type: string
                    format: uuid
                    description: 생성된 지도 ID
                  storage_url:
                    type: string
                    description: S3 저장 URL
                  tiles:
                    type: array
                    items:
                      type: string
                    description: 생성된 타일 URLs
                  bounds:
                    type: array
                    items:
                      type: array
                      items:
                        type: number
                    description: 지도 경계 좌표
        400:
          description: 잘못된 요청
        500:
          description: 서버 오류

  /maps/routes:
    post:
      tags:
        - Maps
      summary: 코스 경로 설정
      description: |
        업로드된 지도를 기반으로 골프코스 경로를 설정합니다.
        PostGIS LINESTRING 형식으로 저장됩니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - route_type
                - path
                - map_id
              properties:
                name:
                  type: string
                  example: "Full Course Route"
                route_type:
                  type: string
                  enum: [FULL_COURSE, HOLE_TO_HOLE, RETURN_TO_BASE, CHARGING_STATION, CUSTOM]
                  example: "FULL_COURSE"
                path:
                  type: array
                  items:
                    type: array
                    items:
                      type: number
                    minItems: 2
                    maxItems: 2
                  description: "경로 좌표 배열 [[lng, lat], [lng, lat], ...]"
                  example: [[-122.4194, 37.7749], [-122.4190, 37.7751], [-122.4185, 37.7753]]
                distance_meters:
                  type: number
                  example: 5500
                estimated_time_seconds:
                  type: integer
                  example: 14400
                map_id:
                  type: string
                  format: uuid
                  description: 참조할 지도 ID
      responses:
        200:
          description: 경로 설정 완료
          content:
            application/json:
              schema:
                type: object
                properties:
                  route_id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  route_type:
                    type: string
                  distance_meters:
                    type: number
                  estimated_time_seconds:
                    type: integer
        400:
          description: 잘못된 요청
        404:
          description: 지도를 찾을 수 없음

  # ===================================
  # Golf Course Routes (Golf Course Context)
  # ===================================
  /golf-courses/{golfCourseId}/routes:
    get:
      tags:
        - Golf Courses
      summary: 골프장 경로 목록 조회
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
        - name: route_type
          in: query
          schema:
            type: string
            enum: [HOLE_TO_HOLE, RETURN_TO_BASE, CHARGING_STATION, CUSTOM]
      responses:
        200:
          description: 경로 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Route'

  /golf-courses/{golfCourseId}/geofences:
    get:
      tags:
        - Maps
      summary: 지오펜스 목록 조회
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      responses:
        200:
          description: 지오펜스 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Geofence'

    post:
      tags:
        - Maps
      summary: 지오펜스 생성
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGeofence'
      responses:
        201:
          description: 지오펜스 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Geofence'

  # ===================================
  # Cart Management
  # ===================================
  /carts/register:
    post:
      tags:
        - Carts
      summary: 골프카트 등록 (제조사 전용)
      description: |
        제조사에서 새로운 골프카트를 시스템에 등록합니다.
        등록 시 MQTT 인증 정보가 자동 생성되고 CartRegistered 이벤트가 발행됩니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serial_number
                - cart_model_id
                - firmware_version
              properties:
                serial_number:
                  type: string
                  description: 카트 시리얼 번호 (고유)
                  example: "DY-2024-CART-001"
                cart_model_id:
                  type: string
                  format: uuid
                  description: 카트 모델 ID
                firmware_version:
                  type: string
                  example: "3.2.1"
                hardware_version:
                  type: string
                  example: "2.0"
                manufacturing_date:
                  type: string
                  format: date
                  example: "2024-01-15"
                warranty_expires:
                  type: string
                  format: date
                  example: "2027-01-15"
      responses:
        201:
          description: 카트 등록 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: 생성된 카트 ID (UUID)
                  serial_number:
                    type: string
                  status:
                    type: string
                    example: "IDLE"
                  mqtt_client_id:
                    type: string
                    description: MQTT 클라이언트 ID
                    example: "cart_DY-2024-CART-001"
                  created_at:
                    type: string
                    format: date-time
        400:
          description: 잘못된 요청 (중복 시리얼 번호 등)
        404:
          description: 카트 모델을 찾을 수 없음

  /carts:
    get:
      tags:
        - Carts
      summary: 카트 목록 조회
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: golf_course_id
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [IDLE, RUNNING, CHARGING, MAINTENANCE, OFFLINE]
      responses:
        200:
          description: 카트 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/GolfCart'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /carts/{cartId}:
    get:
      tags:
        - Carts
      summary: 카트 상세 정보 조회
      parameters:
        - $ref: '#/components/parameters/CartId'
      responses:
        200:
          description: 카트 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCartDetail'

    patch:
      tags:
        - Carts
      summary: 카트 정보 수정
      parameters:
        - $ref: '#/components/parameters/CartId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCart'
      responses:
        200:
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCart'

  /carts/{cartId}/assign:
    patch:
      tags:
        - Carts
      summary: 카트를 골프장에 할당
      description: |
        카트를 특정 골프장에 할당합니다.
        할당 시 골프장 존재 여부를 확인하고 MQTT 설정을 동기화하며 CartAssigned 이벤트를 발행합니다.
      parameters:
        - $ref: '#/components/parameters/CartId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - golf_course_id
              properties:
                golf_course_id:
                  type: string
                  format: uuid
                cart_number:
                  type: string
                  example: "CART-001"
      responses:
        200:
          description: 할당 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCart'

  # ===================================
  # Telemetry
  # ===================================
  /carts/{cartId}/telemetry:
    get:
      tags:
        - Telemetry
      summary: 카트 텔레메트리 데이터 조회
      parameters:
        - $ref: '#/components/parameters/CartId'
        - name: start_time
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: interval
          in: query
          schema:
            type: string
            enum: [1s, 10s, 1m, 5m, 1h]
            default: 10s
      responses:
        200:
          description: 텔레메트리 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart_id:
                    type: string
                    format: uuid
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TelemetryData'

  /carts/{cartId}/telemetry/latest:
    get:
      tags:
        - Telemetry
      summary: 최신 텔레메트리 데이터 조회
      parameters:
        - $ref: '#/components/parameters/CartId'
      responses:
        200:
          description: 최신 텔레메트리 데이터
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryData'

  /telemetry/stream:
    get:
      tags:
        - Telemetry
      summary: 실시간 텔레메트리 스트림 (WebSocket)
      description: |
        WebSocket 연결을 통한 실시간 데이터 스트림
        
        연결: ws://api.dy-golfcart.com/v1/telemetry/stream
        
        구독 메시지:
        ```json
        {
          "action": "subscribe",
          "cart_ids": ["uuid1", "uuid2"],
          "data_types": ["position", "battery", "speed"]
        }
        ```
      parameters:
        - name: cart_ids
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        101:
          description: WebSocket 연결 수립

  # ===================================
  # Commands
  # ===================================
  /carts/{cartId}/commands:
    get:
      tags:
        - Commands
      summary: 명령 이력 조회
      parameters:
        - $ref: '#/components/parameters/CartId'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        200:
          description: 명령 이력
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartCommand'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Commands
      summary: 카트 제어 명령 전송
      parameters:
        - $ref: '#/components/parameters/CartId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendCommand'
      responses:
        202:
          description: 명령 전송 완료 (처리 중)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartCommand'

  /carts/{cartId}/commands/{commandId}:
    get:
      tags:
        - Commands
      summary: 명령 상태 조회
      parameters:
        - $ref: '#/components/parameters/CartId'
        - name: commandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 명령 상태
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartCommand'

  # ===================================
  # Events
  # ===================================
  /events:
    get:
      tags:
        - Events
      summary: 이벤트 목록 조회
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: cart_id
          in: query
          schema:
            type: string
            format: uuid
        - name: event_type
          in: query
          schema:
            type: string
        - name: severity
          in: query
          schema:
            type: string
            enum: [INFO, WARNING, ERROR, CRITICAL]
        - name: resolved
          in: query
          schema:
            type: boolean
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: 이벤트 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartEvent'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /events/{eventId}/resolve:
    post:
      tags:
        - Events
      summary: 이벤트 해결 처리
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notes:
                  type: string
      responses:
        200:
          description: 이벤트 해결 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartEvent'

  # ===================================
  # Assignments
  # ===================================
  /assignments:
    get:
      tags:
        - Assignments
      summary: 예약/배정 목록 조회
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: golf_course_id
          in: query
          schema:
            type: string
            format: uuid
        - name: date
          in: query
          schema:
            type: string
            format: date
        - name: status
          in: query
          schema:
            type: string
            enum: [RESERVED, ACTIVE, COMPLETED, CANCELLED]
      responses:
        200:
          description: 예약/배정 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartAssignment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Assignments
      summary: 카트 예약/배정 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssignment'
      responses:
        201:
          description: 예약/배정 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartAssignment'

  # ===================================
  # Maintenance
  # ===================================
  /carts/{cartId}/maintenance:
    get:
      tags:
        - Maintenance
      summary: 유지보수 이력 조회
      parameters:
        - $ref: '#/components/parameters/CartId'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        200:
          description: 유지보수 이력
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/MaintenanceLog'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Maintenance
      summary: 유지보수 기록 생성
      parameters:
        - $ref: '#/components/parameters/CartId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMaintenanceLog'
      responses:
        201:
          description: 유지보수 기록 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceLog'

  # ===================================
  # Master Dashboard
  # ===================================
  /master/overview:
    get:
      tags:
        - Master
      summary: 제조사 전체 현황 조회
      description: 제조사 관리자 전용 대시보드 데이터
      responses:
        200:
          description: 전체 현황 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  statistics:
                    type: object
                    properties:
                      total_golf_courses:
                        type: integer
                      active_golf_courses:
                        type: integer
                      total_carts:
                        type: integer
                      running_carts:
                        type: integer
                      offline_carts:
                        type: integer
                      maintenance_required:
                        type: integer
                  golf_courses:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        cart_count:
                          type: integer
                        active_carts:
                          type: integer
                        status:
                          type: string
                  recent_events:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartEvent'

# ===================================
# Components
# ===================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    GolfCourseId:
      name: golfCourseId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    CartId:
      name: cartId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  responses:
    UnauthorizedError:
      description: 인증 실패
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ForbiddenError:
      description: 권한 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFoundError:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    # ===================================
    # Common Schemas
    # ===================================
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer

    Point:
      type: object
      required:
        - lat
        - lng
      properties:
        lat:
          type: number
          format: double
        lng:
          type: number
          format: double

    LineString:
      type: object
      required:
        - coordinates
      properties:
        type:
          type: string
          enum: [LineString]
        coordinates:
          type: array
          items:
            type: array
            items:
              type: number
            minItems: 2
            maxItems: 2

    Polygon:
      type: object
      required:
        - coordinates
      properties:
        type:
          type: string
          enum: [Polygon]
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: number
              minItems: 2
              maxItems: 2

    # ===================================
    # User Schemas
    # ===================================
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [MASTER_ADMIN, GOLF_ADMIN, OPERATOR, VIEWER]
        golf_course_id:
          type: string
          format: uuid
          nullable: true
        is_active:
          type: boolean
        last_login_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    # ===================================
    # Golf Course Schemas
    # ===================================
    GolfCourse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        code:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        hole_count:
          type: integer
        status:
          type: string
          enum: [ACTIVE, INACTIVE, MAINTENANCE]
        created_at:
          type: string
          format: date-time

    GolfCourseDetail:
      allOf:
        - $ref: '#/components/schemas/GolfCourse'
        - type: object
          properties:
            operating_hours:
              type: object
              properties:
                open:
                  type: string
                close:
                  type: string
            metadata:
              type: object
            maps:
              type: array
              items:
                $ref: '#/components/schemas/GolfCourseMap'
            cart_count:
              type: integer
            active_carts:
              type: integer

    CreateGolfCourse:
      type: object
      required:
        - name
        - code
      properties:
        name:
          type: string
        code:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        hole_count:
          type: integer
          default: 18
        operating_hours:
          type: object

    UpdateGolfCourse:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        status:
          type: string
          enum: [ACTIVE, INACTIVE, MAINTENANCE]
        operating_hours:
          type: object

    # ===================================
    # Map Schemas
    # ===================================
    GolfCourseMap:
      type: object
      properties:
        id:
          type: string
          format: uuid
        golf_course_id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        tile_url:
          type: string
        bounds:
          $ref: '#/components/schemas/Polygon'
        center_point:
          $ref: '#/components/schemas/Point'
        zoom_levels:
          type: array
          items:
            type: integer
        is_active:
          type: boolean
        uploaded_at:
          type: string
          format: date-time

    Route:
      type: object
      properties:
        id:
          type: string
          format: uuid
        golf_course_id:
          type: string
          format: uuid
        name:
          type: string
        route_type:
          type: string
          enum: [HOLE_TO_HOLE, RETURN_TO_BASE, CHARGING_STATION, CUSTOM]
        path:
          $ref: '#/components/schemas/LineString'
        distance_meters:
          type: number
        estimated_time_seconds:
          type: integer
        waypoints:
          type: array
          items:
            $ref: '#/components/schemas/Point'
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    CreateRoute:
      type: object
      required:
        - name
        - route_type
        - path
      properties:
        name:
          type: string
        route_type:
          type: string
          enum: [HOLE_TO_HOLE, RETURN_TO_BASE, CHARGING_STATION, CUSTOM]
        path:
          $ref: '#/components/schemas/LineString'
        waypoints:
          type: array
          items:
            $ref: '#/components/schemas/Point'
        restrictions:
          type: object

    Geofence:
      type: object
      properties:
        id:
          type: string
          format: uuid
        golf_course_id:
          type: string
          format: uuid
        name:
          type: string
        fence_type:
          type: string
          enum: [RESTRICTED, SLOW_ZONE, NO_ENTRY, HAZARD]
        geometry:
          $ref: '#/components/schemas/Polygon'
        speed_limit:
          type: number
          nullable: true
        alert_level:
          type: string
          enum: [INFO, WARNING, CRITICAL]
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    CreateGeofence:
      type: object
      required:
        - name
        - fence_type
        - geometry
      properties:
        name:
          type: string
        fence_type:
          type: string
          enum: [RESTRICTED, SLOW_ZONE, NO_ENTRY, HAZARD]
        geometry:
          $ref: '#/components/schemas/Polygon'
        speed_limit:
          type: number
        alert_level:
          type: string
          enum: [INFO, WARNING, CRITICAL]

    # ===================================
    # Cart Schemas
    # ===================================
    GolfCart:
      type: object
      properties:
        id:
          type: string
          format: uuid
        serial_number:
          type: string
        cart_model:
          type: object
          properties:
            id:
              type: string
              format: uuid
            manufacturer:
              type: string
            model_name:
              type: string
            model_code:
              type: string
        golf_course_id:
          type: string
          format: uuid
          nullable: true
        golf_course_name:
          type: string
          nullable: true
        cart_number:
          type: string
        status:
          type: string
          enum: [IDLE, RUNNING, CHARGING, MAINTENANCE, OFFLINE]
        mode:
          type: string
          enum: [MANUAL, AUTONOMOUS, REMOTE]
        firmware_version:
          type: string
        total_distance_km:
          type: number
        total_operating_hours:
          type: integer
        created_at:
          type: string
          format: date-time

    GolfCartDetail:
      allOf:
        - $ref: '#/components/schemas/GolfCart'
        - type: object
          properties:
            installed_date:
              type: string
              format: date
            last_maintenance_date:
              type: string
              format: date
            current_telemetry:
              $ref: '#/components/schemas/TelemetryData'
            recent_events:
              type: array
              items:
                $ref: '#/components/schemas/CartEvent'

    RegisterCart:
      type: object
      required:
        - serial_number
        - cart_model_id
      properties:
        serial_number:
          type: string
        cart_model_id:
          type: string
          format: uuid
        firmware_version:
          type: string

    UpdateCart:
      type: object
      properties:
        cart_number:
          type: string
        status:
          type: string
          enum: [IDLE, RUNNING, CHARGING, MAINTENANCE, OFFLINE]
        mode:
          type: string
          enum: [MANUAL, AUTONOMOUS, REMOTE]
        firmware_version:
          type: string

    # ===================================
    # Telemetry Schemas
    # ===================================
    TelemetryData:
      type: object
      properties:
        cart_id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        position:
          $ref: '#/components/schemas/Point'
        heading:
          type: number
          description: 방향 (0-360도)
        speed:
          type: number
          description: 속도 (km/h)
        battery_level:
          type: integer
          description: 배터리 잔량 (0-100%)
        battery_voltage:
          type: number
        battery_current:
          type: number
        battery_temperature:
          type: number
        motor_temperature:
          type: number
        altitude:
          type: number
        satellites:
          type: integer
        hdop:
          type: number
        sensor_data:
          type: object

    # ===================================
    # Command Schemas
    # ===================================
    CartCommand:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cart_id:
          type: string
          format: uuid
        command_type:
          type: string
          enum: [START, STOP, SET_SPEED, CHANGE_MODE, RETURN_TO_BASE, EMERGENCY_STOP]
        command_data:
          type: object
        source:
          type: string
          enum: [SYSTEM, OPERATOR, SCHEDULE, EMERGENCY]
        status:
          type: string
          enum: [PENDING, SENT, ACKNOWLEDGED, COMPLETED, FAILED]
        sent_at:
          type: string
          format: date-time
        acknowledged_at:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        response_data:
          type: object
          nullable: true
        created_at:
          type: string
          format: date-time

    SendCommand:
      type: object
      required:
        - command_type
        - command_data
      properties:
        command_type:
          type: string
          enum: [START, STOP, SET_SPEED, CHANGE_MODE, RETURN_TO_BASE, EMERGENCY_STOP]
        command_data:
          type: object
          example:
            speed: 10
            mode: AUTONOMOUS

    # ===================================
    # Event Schemas
    # ===================================
    CartEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cart_id:
          type: string
          format: uuid
        cart_number:
          type: string
        event_type:
          type: string
          example: GEOFENCE_ENTRY
        severity:
          type: string
          enum: [INFO, WARNING, ERROR, CRITICAL]
        event_data:
          type: object
        position:
          $ref: '#/components/schemas/Point'
        timestamp:
          type: string
          format: date-time
        resolved:
          type: boolean
        resolved_at:
          type: string
          format: date-time
          nullable: true
        resolved_by:
          type: string
          format: uuid
          nullable: true
        created_at:
          type: string
          format: date-time

    # ===================================
    # Assignment Schemas
    # ===================================
    CartAssignment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        golf_course_id:
          type: string
          format: uuid
        cart_id:
          type: string
          format: uuid
        cart_number:
          type: string
        reservation_code:
          type: string
        player_name:
          type: string
        player_phone:
          type: string
        player_count:
          type: integer
        start_hole:
          type: integer
        scheduled_start:
          type: string
          format: date-time
        scheduled_end:
          type: string
          format: date-time
        actual_start:
          type: string
          format: date-time
          nullable: true
        actual_end:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          enum: [RESERVED, ACTIVE, COMPLETED, CANCELLED]
        notes:
          type: string
        created_at:
          type: string
          format: date-time

    CreateAssignment:
      type: object
      required:
        - golf_course_id
        - cart_id
        - scheduled_start
      properties:
        golf_course_id:
          type: string
          format: uuid
        cart_id:
          type: string
          format: uuid
        player_name:
          type: string
        player_phone:
          type: string
        player_count:
          type: integer
          default: 1
        start_hole:
          type: integer
          default: 1
        scheduled_start:
          type: string
          format: date-time
        scheduled_end:
          type: string
          format: date-time
        notes:
          type: string

    # ===================================
    # Maintenance Schemas
    # ===================================
    MaintenanceLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cart_id:
          type: string
          format: uuid
        maintenance_type:
          type: string
          enum: [ROUTINE, REPAIR, BATTERY, SOFTWARE_UPDATE]
        description:
          type: string
        parts_replaced:
          type: array
          items:
            type: object
            properties:
              part_name:
                type: string
              part_number:
                type: string
              quantity:
                type: integer
        cost:
          type: number
        performed_at:
          type: string
          format: date-time
        performed_by:
          type: string
        next_maintenance_date:
          type: string
          format: date
        created_at:
          type: string
          format: date-time

    CreateMaintenanceLog:
      type: object
      required:
        - maintenance_type
        - performed_at
        - performed_by
      properties:
        maintenance_type:
          type: string
          enum: [ROUTINE, REPAIR, BATTERY, SOFTWARE_UPDATE]
        description:
          type: string
        parts_replaced:
          type: array
          items:
            type: object
        cost:
          type: number
        performed_at:
          type: string
          format: date-time
        performed_by:
          type: string
        next_maintenance_date:
          type: string
          format: date
