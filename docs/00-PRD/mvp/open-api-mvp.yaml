openapi: 3.0.3
info:
  title: DY-GOLFCART Management System API (MVP)
  description: |
    자율주행 골프카트 관제 플랫폼 MVP API
    
    ## 주요 기능
    - 제조사: 골프장 생성, 지도 업로드, 카트 등록 및 할당
    - 골프장: 카트 모니터링, 예약 관리, 유지보수 기록
    
  version: 1.0.0

servers:
  - url: https://api.dy-golfcart.com/v1
    description: Production Server
  - url: http://localhost:8000/v1
    description: Development Server

tags:
  - name: Auth
    description: 인증 관련 API
  - name: Golf Courses
    description: 골프장 관리 API
  - name: Maps
    description: 지도 및 경로 관리 API
  - name: Carts
    description: 골프카트 관리 API
  - name: Telemetry
    description: 실시간 텔레메트리 API
  - name: Events
    description: 이벤트 조회 API
  - name: Assignments
    description: 카트 예약/배정 API
  - name: Maintenance
    description: 유지보수 관리 API
  - name: Users
    description: 사용자 관리 API

security:
  - bearerAuth: []

paths:
  # ===================================
  # Authentication
  # ===================================
  /auth/manufacturer/login:
    post:
      tags:
        - Auth
      summary: 제조사 관계자 로그인
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/ManufacturerUser'

  /auth/golf-course/login:
    post:
      tags:
        - Auth
      summary: 골프장 관계자 로그인
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/GolfCourseUser'

  # ===================================
  # Golf Courses
  # ===================================
  /golf-courses:
    get:
      tags:
        - Golf Courses
      summary: 골프장 목록 조회
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, MAINTENANCE]
      responses:
        200:
          description: 골프장 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/GolfCourse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Golf Courses
      summary: 골프장 생성 (제조사 전용)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGolfCourse'
      responses:
        201:
          description: 골프장 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'

  /golf-courses/{golfCourseId}:
    get:
      tags:
        - Golf Courses
      summary: 골프장 상세 정보 조회
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      responses:
        200:
          description: 골프장 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourseDetail'

    patch:
      tags:
        - Golf Courses
      summary: 골프장 정보 수정
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGolfCourse'
      responses:
        200:
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'

  # ===================================
  # Maps & Routes
  # ===================================
  /golf-courses/{golfCourseId}/maps:
    get:
      tags:
        - Maps
      summary: 지도 목록 조회
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      responses:
        200:
          description: 지도 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/GolfCourseMap'

    post:
      tags:
        - Maps
      summary: 지도 업로드 (제조사 전용)
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - version
              properties:
                file:
                  type: string
                  format: binary
                version:
                  type: string
                name:
                  type: string
                metadata:
                  type: object
      responses:
        201:
          description: 지도 업로드 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourseMap'

  /golf-courses/{golfCourseId}/routes:
    get:
      tags:
        - Maps
      summary: 경로 목록 조회
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
        - name: route_type
          in: query
          schema:
            type: string
            enum: [HOLE_TO_HOLE, RETURN_TO_BASE, CHARGING_STATION, CUSTOM]
      responses:
        200:
          description: 경로 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Route'

    post:
      tags:
        - Maps
      summary: 경로 생성 (제조사 전용)
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoute'
      responses:
        201:
          description: 경로 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'

  /golf-courses/{golfCourseId}/geofences:
    get:
      tags:
        - Maps
      summary: 지오펜스 목록 조회
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      responses:
        200:
          description: 지오펜스 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Geofence'

    post:
      tags:
        - Maps
      summary: 지오펜스 생성 (제조사 전용)
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGeofence'
      responses:
        201:
          description: 지오펜스 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Geofence'

  /golf-courses/{golfCourseId}/holes:
    get:
      tags:
        - Maps
      summary: 홀 정보 목록 조회
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      responses:
        200:
          description: 홀 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hole'

    post:
      tags:
        - Maps
      summary: 홀 정보 생성 (제조사 전용)
      parameters:
        - $ref: '#/components/parameters/GolfCourseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHole'
      responses:
        201:
          description: 홀 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hole'

  # ===================================
  # Carts
  # ===================================
  /carts:
    get:
      tags:
        - Carts
      summary: 카트 목록 조회
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: golf_course_id
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [IDLE, RUNNING, CHARGING, MAINTENANCE, OFFLINE]
      responses:
        200:
          description: 카트 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/GolfCart'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Carts
      summary: 카트 등록 (제조사 전용)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCart'
      responses:
        201:
          description: 카트 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCart'

  /carts/{cartId}:
    get:
      tags:
        - Carts
      summary: 카트 상세 정보 조회
      parameters:
        - $ref: '#/components/parameters/CartId'
      responses:
        200:
          description: 카트 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCartDetail'

    patch:
      tags:
        - Carts
      summary: 카트 정보 수정
      parameters:
        - $ref: '#/components/parameters/CartId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCart'
      responses:
        200:
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCart'

  /carts/{cartId}/register:
    post:
      tags:
        - Carts
      summary: 카트를 골프장에 등록 (제조사 전용)
      parameters:
        - $ref: '#/components/parameters/CartId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - golf_course_id
                - registration_type
              properties:
                golf_course_id:
                  type: string
                  format: uuid
                registration_type:
                  type: string
                  enum: [NEW, TRANSFER, RETURN]
                cart_number:
                  type: string
                notes:
                  type: string
      responses:
        200:
          description: 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartRegistration'

  /cart-models:
    get:
      tags:
        - Carts
      summary: 카트 모델 목록 조회
      responses:
        200:
          description: 카트 모델 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartModel'

    post:
      tags:
        - Carts
      summary: 카트 모델 등록 (제조사 전용)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCartModel'
      responses:
        201:
          description: 모델 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartModel'

  # ===================================
  # Telemetry
  # ===================================
  /carts/{cartId}/telemetry:
    get:
      tags:
        - Telemetry
      summary: 카트 텔레메트리 데이터 조회
      parameters:
        - $ref: '#/components/parameters/CartId'
        - name: start_time
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: 텔레메트리 데이터
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart_id:
                    type: string
                    format: uuid
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TelemetryData'

  /carts/{cartId}/telemetry/latest:
    get:
      tags:
        - Telemetry
      summary: 최신 텔레메트리 데이터 조회
      parameters:
        - $ref: '#/components/parameters/CartId'
      responses:
        200:
          description: 최신 텔레메트리 데이터
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryData'

  # ===================================
  # Events
  # ===================================
  /events:
    get:
      tags:
        - Events
      summary: 이벤트 목록 조회
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: cart_id
          in: query
          schema:
            type: string
            format: uuid
        - name: event_type
          in: query
          schema:
            type: string
        - name: severity
          in: query
          schema:
            type: string
            enum: [INFO, WARNING, ERROR, CRITICAL]
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: 이벤트 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartEvent'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  # ===================================
  # Assignments
  # ===================================
  /assignments:
    get:
      tags:
        - Assignments
      summary: 예약/배정 목록 조회
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: golf_course_id
          in: query
          schema:
            type: string
            format: uuid
        - name: date
          in: query
          schema:
            type: string
            format: date
        - name: status
          in: query
          schema:
            type: string
            enum: [RESERVED, ACTIVE, COMPLETED, CANCELLED]
      responses:
        200:
          description: 예약/배정 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartAssignment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Assignments
      summary: 카트 예약/배정 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssignment'
      responses:
        201:
          description: 예약/배정 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartAssignment'

  /assignments/{assignmentId}:
    get:
      tags:
        - Assignments
      summary: 예약/배정 상세 조회
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 예약/배정 상세
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartAssignment'

    patch:
      tags:
        - Assignments
      summary: 예약/배정 수정
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssignment'
      responses:
        200:
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartAssignment'

  # ===================================
  # Maintenance
  # ===================================
  /carts/{cartId}/maintenance:
    get:
      tags:
        - Maintenance
      summary: 유지보수 이력 조회
      parameters:
        - $ref: '#/components/parameters/CartId'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        200:
          description: 유지보수 이력
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/MaintenanceLog'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Maintenance
      summary: 유지보수 기록 생성
      parameters:
        - $ref: '#/components/parameters/CartId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMaintenanceLog'
      responses:
        201:
          description: 유지보수 기록 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceLog'

  # ===================================
  # Users
  # ===================================
  /manufacturer/users:
    get:
      tags:
        - Users
      summary: 제조사 사용자 목록 조회
      responses:
        200:
          description: 사용자 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ManufacturerUser'

    post:
      tags:
        - Users
      summary: 제조사 사용자 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateManufacturerUser'
      responses:
        201:
          description: 사용자 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManufacturerUser'

  /golf-course-users:
    get:
      tags:
        - Users
      summary: 골프장 사용자 목록 조회
      parameters:
        - name: golf_course_id
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 사용자 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/GolfCourseUser'

    post:
      tags:
        - Users
      summary: 골프장 사용자 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGolfCourseUser'
      responses:
        201:
          description: 사용자 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourseUser'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    GolfCourseId:
      name: golfCourseId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    CartId:
      name: cartId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  schemas:
    # Common
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer

    Point:
      type: object
      properties:
        lat:
          type: number
        lng:
          type: number

    LineString:
      type: object
      properties:
        type:
          type: string
          enum: [LineString]
        coordinates:
          type: array
          items:
            type: array
            items:
              type: number

    Polygon:
      type: object
      properties:
        type:
          type: string
          enum: [Polygon]
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: number

    # Users
    ManufacturerUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        name:
          type: string
        phone:
          type: string
        department:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    CreateManufacturerUser:
      type: object
      required:
        - email
        - name
        - password
      properties:
        email:
          type: string
        name:
          type: string
        phone:
          type: string
        department:
          type: string
        password:
          type: string

    GolfCourseUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        golf_course_id:
          type: string
          format: uuid
        email:
          type: string
        name:
          type: string
        phone:
          type: string
        position:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    CreateGolfCourseUser:
      type: object
      required:
        - golf_course_id
        - email
        - name
        - password
      properties:
        golf_course_id:
          type: string
          format: uuid
        email:
          type: string
        name:
          type: string
        phone:
          type: string
        position:
          type: string
        password:
          type: string

    # Golf Courses
    GolfCourse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        code:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        hole_count:
          type: integer
        status:
          type: string
        created_at:
          type: string
          format: date-time

    GolfCourseDetail:
      allOf:
        - $ref: '#/components/schemas/GolfCourse'
        - type: object
          properties:
            metadata:
              type: object
            cart_count:
              type: integer
            active_carts:
              type: integer

    CreateGolfCourse:
      type: object
      required:
        - name
        - code
      properties:
        name:
          type: string
        code:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        hole_count:
          type: integer

    UpdateGolfCourse:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        status:
          type: string

    # Maps
    GolfCourseMap:
      type: object
      properties:
        id:
          type: string
          format: uuid
        golf_course_id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        tile_url:
          type: string
        bounds:
          $ref: '#/components/schemas/Polygon'
        center_point:
          $ref: '#/components/schemas/Point'
        zoom_levels:
          type: array
          items:
            type: integer
        is_active:
          type: boolean
        uploaded_at:
          type: string
          format: date-time

    Hole:
      type: object
      properties:
        id:
          type: string
          format: uuid
        golf_course_id:
          type: string
          format: uuid
        hole_number:
          type: integer
        par:
          type: integer
        distance_meters:
          type: integer
        tee_position:
          $ref: '#/components/schemas/Point'
        green_position:
          $ref: '#/components/schemas/Point'

    CreateHole:
      type: object
      required:
        - hole_number
        - par
      properties:
        hole_number:
          type: integer
        par:
          type: integer
        distance_meters:
          type: integer
        tee_position:
          $ref: '#/components/schemas/Point'
        green_position:
          $ref: '#/components/schemas/Point'

    Route:
      type: object
      properties:
        id:
          type: string
          format: uuid
        golf_course_id:
          type: string
          format: uuid
        name:
          type: string
        route_type:
          type: string
        path:
          $ref: '#/components/schemas/LineString'
        distance_meters:
          type: number
        waypoints:
          type: array
          items:
            $ref: '#/components/schemas/Point'
        is_active:
          type: boolean

    CreateRoute:
      type: object
      required:
        - name
        - route_type
        - path
      properties:
        name:
          type: string
        route_type:
          type: string
        path:
          $ref: '#/components/schemas/LineString'
        waypoints:
          type: array
          items:
            $ref: '#/components/schemas/Point'

    Geofence:
      type: object
      properties:
        id:
          type: string
          format: uuid
        golf_course_id:
          type: string
          format: uuid
        name:
          type: string
        fence_type:
          type: string
        geometry:
          $ref: '#/components/schemas/Polygon'
        speed_limit:
          type: number
        is_active:
          type: boolean

    CreateGeofence:
      type: object
      required:
        - name
        - fence_type
        - geometry
      properties:
        name:
          type: string
        fence_type:
          type: string
        geometry:
          $ref: '#/components/schemas/Polygon'
        speed_limit:
          type: number

    # Carts
    CartModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        manufacturer:
          type: string
        model_name:
          type: string
        model_code:
          type: string
        capacity:
          type: integer
        max_speed:
          type: number
        features:
          type: object

    CreateCartModel:
      type: object
      required:
        - manufacturer
        - model_name
        - model_code
      properties:
        manufacturer:
          type: string
        model_name:
          type: string
        model_code:
          type: string
        capacity:
          type: integer
        max_speed:
          type: number
        features:
          type: object

    GolfCart:
      type: object
      properties:
        id:
          type: string
          format: uuid
        serial_number:
          type: string
        cart_model:
          $ref: '#/components/schemas/CartModel'
        golf_course_id:
          type: string
          format: uuid
        golf_course_name:
          type: string
        cart_number:
          type: string
        status:
          type: string
        mode:
          type: string
        firmware_version:
          type: string
        created_at:
          type: string
          format: date-time

    GolfCartDetail:
      allOf:
        - $ref: '#/components/schemas/GolfCart'
        - type: object
          properties:
            current_telemetry:
              $ref: '#/components/schemas/TelemetryData'
            recent_events:
              type: array
              items:
                $ref: '#/components/schemas/CartEvent'

    RegisterCart:
      type: object
      required:
        - serial_number
        - cart_model_id
      properties:
        serial_number:
          type: string
        cart_model_id:
          type: string
          format: uuid
        firmware_version:
          type: string

    UpdateCart:
      type: object
      properties:
        cart_number:
          type: string
        status:
          type: string
        mode:
          type: string
        firmware_version:
          type: string

    CartRegistration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cart_id:
          type: string
          format: uuid
        golf_course_id:
          type: string
          format: uuid
        registration_type:
          type: string
        cart_number:
          type: string
        notes:
          type: string
        registered_at:
          type: string
          format: date-time

    # Telemetry
    TelemetryData:
      type: object
      properties:
        cart_id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        position:
          $ref: '#/components/schemas/Point'
        heading:
          type: number
        speed:
          type: number
        battery_level:
          type: integer
        sensor_data:
          type: object

    # Events
    CartEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cart_id:
          type: string
          format: uuid
        event_type:
          type: string
        severity:
          type: string
        event_data:
          type: object
        position:
          $ref: '#/components/schemas/Point'
        timestamp:
          type: string
          format: date-time

    # Assignments
    CartAssignment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        golf_course_id:
          type: string
          format: uuid
        cart_id:
          type: string
          format: uuid
        cart_number:
          type: string
        reservation_code:
          type: string
        player_name:
          type: string
        player_count:
          type: integer
        start_hole:
          type: integer
        scheduled_start:
          type: string
          format: date-time
        scheduled_end:
          type: string
          format: date-time
        status:
          type: string
        created_at:
          type: string
          format: date-time

    CreateAssignment:
      type: object
      required:
        - golf_course_id
        - cart_id
        - scheduled_start
      properties:
        golf_course_id:
          type: string
          format: uuid
        cart_id:
          type: string
          format: uuid
        player_name:
          type: string
        player_count:
          type: integer
        start_hole:
          type: integer
        scheduled_start:
          type: string
          format: date-time
        scheduled_end:
          type: string
          format: date-time

    UpdateAssignment:
      type: object
      properties:
        status:
          type: string
        scheduled_end:
          type: string
          format: date-time

    # Maintenance
    MaintenanceLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cart_id:
          type: string
          format: uuid
        maintenance_type:
          type: string
        description:
          type: string
        performed_at:
          type: string
          format: date-time
        performed_by:
          type: string
        created_at:
          type: string
          format: date-time

    CreateMaintenanceLog:
      type: object
      required:
        - maintenance_type
        - performed_at
        - performed_by
      properties:
        maintenance_type:
          type: string
        description:
          type: string
        performed_at:
          type: string
          format: date-time
        performed_by:
          type: string
