name: CI - Build and Push Multi-Platform Images

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build and push'
        required: true
        default: 'v1.0.0'
        type: string

env:
  ECR_REGISTRY: 187509843329.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: viadevelopers/dyaf/monolith
  AWS_REGION: ap-northeast-2

jobs:
  checkout:
    runs-on: self-hosted
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
      previous-tag: ${{ steps.get-previous-tag.outputs.previous-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set tag from input or git tag
        id: set-tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Get previous tag for rollback
        id: get-previous-tag
        run: |
          CURRENT_TAG=${{ steps.set-tag.outputs.tag }}
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "^${CURRENT_TAG}$" | tail -n1)
          if [ "$PREVIOUS_TAG" = "$CURRENT_TAG" ]; then
            PREVIOUS_TAG=$(git tag --sort=-version:refname | head -n2 | tail -n1)
          fi
          echo "previous-tag=${PREVIOUS_TAG:-latest}" >> $GITHUB_OUTPUT

      - name: Verify Docker buildx
        run: |
          docker buildx version
          docker buildx ls

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create image index
        run: |
          TAG=${{ steps.set-tag.outputs.tag }}
          # Create multi-platform manifest for the new tag
          docker buildx imagetools create \
            --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${TAG} \
            || echo "Image index will be created after platform builds"

  build-amd64:
    runs-on: self-hosted
    needs: checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push AMD64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.checkout.outputs.tag }}-amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-arm64:
    runs-on: self-hosted
    needs: checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.checkout.outputs.tag }}-arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifest:
    runs-on: self-hosted
    needs: [checkout, build-amd64, build-arm64]
    if: success()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create and push multi-platform manifest
        run: |
          TAG=${{ needs.checkout.outputs.tag }}
          
          # Create multi-platform manifest
          docker buildx imagetools create \
            --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${TAG} \
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${TAG}-amd64 \
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${TAG}-arm64

          # Update latest tag
          docker buildx imagetools create \
            --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${TAG}

  rollback:
    runs-on: self-hosted
    needs: [checkout, build-amd64, build-arm64]
    if: failure()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Rollback to previous version
        run: |
          TAG=${{ needs.checkout.outputs.tag }}
          PREVIOUS_TAG=${{ needs.checkout.outputs.previous-tag }}
          
          echo "Build failed for tag: ${TAG}"
          echo "Rolling back latest to: ${PREVIOUS_TAG}"
          
          # Tag failed build
          if docker manifest inspect ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${TAG} > /dev/null 2>&1; then
            docker buildx imagetools create \
              --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${TAG}-failed \
              ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${TAG}
          fi
          
          # Rollback latest to previous version
          if [ "${PREVIOUS_TAG}" != "latest" ] && [ -n "${PREVIOUS_TAG}" ]; then
            docker buildx imagetools create \
              --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
              ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${PREVIOUS_TAG}
            echo "Rollback completed: latest -> ${PREVIOUS_TAG}"
          else
            echo "No previous version found for rollback"
          fi

      - name: Notify rollback
        run: |
          echo "::error::Build failed and rollback completed"
          echo "Failed tag: ${{ needs.checkout.outputs.tag }}"
          echo "Rolled back to: ${{ needs.checkout.outputs.previous-tag }}"
